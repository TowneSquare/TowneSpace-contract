/*
    - This module is the main entry point for the studio.
    - It is responsible for creating collections, minting tokens,
    and composing and decomposing tokens.
    - It is also responsible for transferring tokens.
*/

module townespace::studio {
    use aptos_framework::fungible_asset::{FungibleStore}; 
    use aptos_framework::object::{Self, Object};
    // use std::error;
    use std::option::{Self, Option};
    use std::signer;
    use std::string::{String};
    use std::vector;

    use townespace::core::{
        Self, 
        Composable,
        Trait
        };

    use townespace::events;

    // ---------------
    // Entry Functions
    // ---------------
    
    // Create a new collection
    public entry fun create_collection<T: key>(
        creator_signer: &signer,
        description: String,
        max_supply: Option<u64>, // if the collection is set to haved a fixed supply.
        name: String,
        symbol: String,
        uri: String,
        royalty_numerator: u64,
        royalty_denominator: u64
    ) {
        let collection_object = core::create_collection_internal<T>(
            creator_signer,
            description,
            max_supply,
            name,
            symbol,
            uri,
            royalty_numerator,
            royalty_denominator
        );
        events::emit_collection_created_event(
            signer::address_of(creator_signer),
            events::collection_metadata(collection_object)
        );
    }

    // Mint a composable token
    public entry fun mint_composable_token(
        creator_signer: &signer,
        collection_name: String,
        description: String,
        type: String,
        name: String,
        num_type: u64,
        uri: String, 
        traits: vector<Object<Trait>>,
        coins: vector<Object<FungibleStore>>,
        royalty_numerator: u64,
        royalty_denominator: u64
    ) {
        let token_object = core::mint_token_internal<core::Composable>(
            creator_signer,
            collection_name,
            description,
            type,
            name,
            num_type,
            uri, 
            traits,
            coins,
            royalty_numerator,
            royalty_denominator,
            option::none(),
            option::none(),
            option::none()
        );
        
        events::emit_composable_token_minted_event(
                signer::address_of(creator_signer),
                events::composable_token_metadata(token_object)
            );
    }

    public entry fun mint_trait_token(
        creator_signer: &signer,
        collection_name: String,
        description: String,
        type: String,
        name: String,
        num_type: u64,
        uri: String,
        royalty_numerator: u64,
        royalty_denominator: u64
    ) {
        let token_object = core::mint_token_internal<core::Trait>(
            creator_signer,
            collection_name,
            description,
            type,
            name,
            num_type,
            uri, 
            vector::empty(),
            vector::empty(),
            royalty_numerator,
            royalty_denominator,
            option::none(),
            option::none(),
            option::none()
        );
        
        events::emit_trait_token_minted_event(
                signer::address_of(creator_signer),
                events::trait_token_metadata(token_object)
            );
    }

    // TODO: delete collection

    // Burn composable token
    /*
        This will involve decomposing the composable token, 
        transferring all the associated object tokens
        to the owner, and then burning the aptos token.
    */

    // Compose one object
    public entry fun equip_trait(
        owner_signer: &signer,
        composable_object: Object<Composable>,
        trait_object: Object<Trait>,
        new_uri: String // User should not prompt this! It should be generated by the studio.
    ) {
        // TODO: assert input sanitazation 
        core::equip_trait_internal(owner_signer, composable_object, trait_object);
        // Update uri
        update_uri(owner_signer, composable_object, new_uri);
    }

    // Decompose one object
    public entry fun unequip_trait(
        owner_signer: &signer,
        composable_object: Object<Composable>,
        trait_object: Object<Trait>,
        new_uri: String // User should not prompt this! It should be generated by the studio.
    ) {
        // TODO: assert input sanitazation 
        // TODO: assert owner
        core::unequip_trait_internal(owner_signer, composable_object, trait_object);
        // Update uri
        update_uri(owner_signer, composable_object, new_uri);
    }

    // Decompose an entire composable token
    // public entry fun decompose_entire_token(
    //     owner_signer: &signer,
    //     collection_name: String,
    //     composable_object: Object<Composable>,
    //     new_uri: String // User should not prompt this! It should be generated by the studio.
    // ) {
    //     // TODO: assert input sanitazation 
    //     // TODO: iterate through the vector and unequip traits
    //     // core::unequip_trait_internal(owner_signer, composable_object); 
    //     // Update uri
    //     // update_uri(owner_signer, collection_name, composable_token_object, new_uri);
    //     // TODO: events
    // }

    // Directly transfer a token to a user.
    // public entry fun raw_transfer<T: key>(
    //     owner_signer: &signer, 
    //     token_address: address,
    //     new_owner_address: address,
    // ) {
    //     // TODO: assert input sanitazation 
    //     // TODO: core::transfer
    //     // TODO: events
    // }

    // Transfer with a fee function
    // public entry fun transfer_with_fee<T: key>(
    //     owner_signer: &signer,
    //     token_address: address,
    //     new_owner_address: address,
    //     //fee: u64
    // ){
    //     // TODO: assert input sanitazation 
    //     // TODO: core::transfer
    //     // TODO: events
    // }

    // --------
    // Mutators
    // --------
    // Composable Token
    inline fun update_uri(
        owner_signer: &signer,
        composable_object: Object<Composable>,
        new_uri: String
    ) {
        // TODO: asserts 
        core::update_uri_internal(
            owner_signer,
            composable_object,
            new_uri
        );
        // TODO: events
    }

}